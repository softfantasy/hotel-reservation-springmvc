On an incoming request, any methods annotated with @ModelAttribute are called before any controller handler method.
It pre populates the Model with an Address object.

@ModelAttribute("address")
public Address addAddress() {
	return new Address();
}


Springâ€™s @SessionAttributes is used on a controller to designate which model attributes should be stored in the session
@SessionAttributes allows you to do is tell Spring which of your model attributes will also be copied to HttpSession before rendering the view

@Controller
@SessionAttributes("address")
public class MyController {
  ...
}

The flow of execution is
1. invoke all @ModelAttribute methods to add objects to the Model.
2. invoke the actual endpoint handler - the method with @GetMapping
3. After the handler is called, the view is rendered then stuff is added to the Session.




@SessionAttributes and @ModelAttribute vs HttpSession.


- Note the keyword MODEL attributes.
@SessionAttributes enables persisting model attributes session between requests

@Controller
@SessionAttributes("someAttribute")
@RequestMapping("/test")
public class FirstController {

    @GetMapping("/init")
    public String testHandler1(Model model, HttpSession session) {
        session.setAttribute("session", "TRUE");         <-- session scope
        model.addAttribute("someAttribute", "TRUE");     <-- model and session scope
        model.addAttribute("model", "TRUE");             <-- request scope
        return "index";
    }

}

Pay attention to model.addAttribute("someAttribute", "TRUE");
Since you used @SessionAttributes("someAttribute"), even though you add it to the model, it gets persisted to
the session so you can get "conversational scoped".

This is why if you create a method annotated with @ModelAttribute within the controller like so
AND the controller has @SessionAttribute("address")

@ModelAttribute("address")
public Address addAddress() {
	return new Address();
}

Spring will add the "address" object to the Model, making it available for request scope AND it will also
persist it to the Session making it available in the session scope too.


Some things to note.

- Adding to the Model only without a matching @SessionAttribute will mean its only request scope. Request scope
means that the model attribute will only be available in the view template for this request, not for any future requests
since its not persisted.

- adding attributes to the Session through HttpSession has nothing to do with the Model or conversational scope.
It will purely add something to the Session scope and thats it!

